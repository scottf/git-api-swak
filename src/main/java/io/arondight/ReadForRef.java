/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.arondight;

import com.google.gson.Gson;

import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("rawtypes")
public class ReadForRef {
    String refTarget;
    String url = "https://raw.githubusercontent.com/nats-io/jsm.go/main/schema_source/jetstream/api/v1/definitions.json";

    public static void main(String[] args) throws Exception {
        new ReadForRef("#/definitions/golang_uint64").read();;
    }

    public ReadForRef(String refTarget) {
        this.refTarget = refTarget;
    }

    public ReadForRef(String refTarget, String url) {
        this.refTarget = refTarget;
        this.url = url;
    }

    public void read() throws Exception {
        String json = FileUtils.readUrl(url);

        Gson gson = new Gson();
        Map map = gson.fromJson(json, Map.class);

        Map<String, Map> objects = getObjects((Map)map.get("definitions"));

        for (String object : objects.keySet()) {
            processObject(object, objects.get(object));
        }
    }

    private void processObject(String object, Map map) {
        for (Object propKey : map.keySet()) {
            Map props = (Map)map.get(propKey);
            if (!checkRef(object, propKey, props, false)) {
                Map items = (Map)props.get("items");
                if (items != null) {
                    checkRef(object, propKey, items, true);
                }
            }
        }
    }

    private boolean checkRef(String object, Object propKey, Map props, boolean array) {
        String ref = (String)props.get("$ref");
        if (refTarget.equals(ref)) {
            System.out.println("- `" + object + "." + propKey + (array ? "` _array_": "`"));
            return true;
        }
        return false;
    }

    private Map<String, Map> getObjects(Map definitions) {
        Map<String, Map> objects = new HashMap<>();

        for (Object oKey : definitions.keySet()) {
            Map def = (Map)definitions.get(oKey);
            String type = (String)def.get("type");
            if ("object".equals(type)) {
                String key = (String)oKey;
                Map props = (Map)((Map)definitions.get(oKey)).get("properties");
                if (props != null) {
                    objects.put(key, props);
                }
            }
        }
        return objects;
    }
}
